#!/usr/bin/env python


""" ABOUT basic_Ward.py script
 Need to specify homeDir setting for YOUR user account
 See the "!!!TODO" comments for advice on how to improve this script
"""


#SETTINGS======================================================
homeDir = "/home/user/" #!!! need to specify for YOUR user account
downDir = "Downloads/" #name of local downloads directory
monPause = 1 #sleep time between directory checks (in seconds)
#===============================================================


import os
import sys
import time


""" Uses ClamAV's "clamscan" along with specified options and a target to scan a directory
 INPUT "targ" is the absolute path name for the directory to be scanned
 !!!TODO include exclusions? change the clamscan options?
"""
def runCS(targ):
    print("Scanning " + targ)
    #!!! include exclusions
    csOptions = "--no-summary --infected --detect-pua=yes --alert-macros=yes"
    scan = "clamscan "+csOptions
    safeCmd(scan, [targ])


""" safeCmd() is a function which ATTEMPTS to safely execute complex system commands and avoid potential injections
 To be honest the use of os.system() introduces some serious vulnerabilities which could lead to RCE and/or AV bypass - just try to avoid it whenever possible. Email the_abjuri5t@protonmail.com if you find any vulnerabilities.
 INPUT "base" is command for TRUSTED string, argList is a list of UNKNOWN strings to be scanned
 !!!TODO use different method for specifying variable directories which does not introduce a potential vulnerability
"""
def safeCmd(base, argList):
    cmd = base
    for arg in argList:
        if(('\"' in arg) or ('\'' in arg) or (';' in arg) or ("&&" in arg) or ("||" in arg)):
            print("Threat detected in safeCmd()!")
            print("\targument \""+arg+"\" passed-into safeCmd()")
            sys.exit()
        else:
            cmd = cmd+' '+arg
    print("Running: \""+cmd+'\"')
    os.system(cmd)
    time.sleep(.1)


""" basically the "main" code for this script
 Creates string for target directory and gets the names of files therein. Queries the directory's contents periodically and initiates a scan if the contents have changed.
 !!!TODO parse arguments for varied execution? run a scan only on NEW files? calculate a fast hash instead of relying on file names? make the scan recursive?
"""
artLines = ["                   ________________", "                ,-\',--------------.`-.", "             ,-\',-\'  1 1 1  0 1 1  `-.`-.", "          ,-\',-\' 1 0,-==========-.0 0 `-.`-.", "        ,\',-\'1 0,-\',-\'          `-.`-.0 0`-.`.", "      ,\',\' 0 ,-\',-\'       ,.       `-.`-. 1 `.`.", "    ,\',\' 0 ,\',-\'        ,\'  `.        `-.`. 0 `.`.", "    // 0 ,\',\'         ,\'      `.         `.`. 1 \\\\", "   // 0,\',\'   r-----,\'----------`.-----+   `.`.1 \\\\", "  // 0 //     |   ,\'              `.   |     \\\\ 1 \\\\", " // 0 //      | ,\'     oo@@@@oo     `. |      \\\\ 0 \\\\", ":: 0 //       ,\'     o@        @o     `.       \\\\ 0 ::", "!! 0 ::     ,\'|     @   ______   @     |`.     :: 1 !!", "!! 0 !!   ,\'  |    @   |r----+|   @    |  `.   !! 0 !!", "!!   !!  :    |    @   ||    ||   @    |    ;  !!   !!", "!! 1 !!   `.  |    @   |L____j|   @    |  ,\'   !! 0 !!", "!! 0 ::     `.|     @   ------   @     |,\'     :: 1 !!", ":: 0 \\\\       `.     *@        @*     ,\'       // 1 ::", " \\\\ 1 \\\\      | `.     **@@@@**     ,\' |      // 0 //", "  \\\\ 1 \\\\     |   `.              ,\'   |     // 0 //", "   \\\\ 1`.`.   L_____`.__________,\'_____j   ,\',\'1 //", "    \\\\ 1 `.`.         `.      ,\'         ,\',\' 0 //", "    `.`. 1 `.`-.        `.  ,\'        ,-\',\' 0 ,\',\'", "      `.`. 0 `-.`-.       `\'       ,-\',-\' 0 ,\',\'", "        `.`-.0 0`-.`-.          ,-\',-\'1 0,-\',\'", "          `-.`-. 0 1`-==========-\'1 0 ,-\',-\'", "             `-.`-.  1 1 0  0 1 1  ,-\',-\'", "                `-.`-.__________,-\',-\'", "                   `--------------\'", ""] #Feel free to use it, but don't take credit for MY ascii art  -_-
for line in artLines:
    print(' ' + line)

targetDir = homeDir+downDir #!!! scan other dirs too?
pastContent = []
while(True):
    content = os.listdir(targetDir) #other changes? calculate fast hash
    if(content != pastContent):
        print(content) #!!! only scan changes to dir
        runCS(targetDir) #!!! make recursive
    pastContent = content
    time.sleep(monPause)
